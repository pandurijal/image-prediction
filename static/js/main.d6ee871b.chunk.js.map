{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onImgDrop","accepted","rejected","links","setState","preview","onImgLoad","e","state","model","classify","target","then","predictions","_this2","mobilenet","_this$state","react_default","a","createElement","className","build_default","accept","onDrop","src","onLoad","alt","map","prediction","index","percentProb","Math","round","probability","key","concat","style","width","transitionDuration","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yYA2FeA,2BAnFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcRQ,UAAY,SAACC,EAAUC,EAAUC,GAC/BV,EAAKW,SAAS,CAAEC,QAASJ,EAAS,GAAGI,WAhBpBZ,EAmBnBa,UAAY,SAAAC,GACVd,EAAKe,MAAMC,MAAMC,SAASH,EAAEI,QAAQC,KAAK,SAAAC,GACvCpB,EAAKW,SAAS,CAAES,mBAnBlBpB,EAAKe,MAAQ,CACXC,MAAO,KACPJ,QAAS,GACTQ,YAAa,IALEpB,mFASC,IAAAqB,EAAAlB,KAClBmB,MAAiBH,KAAK,SAAAH,GACpBK,EAAKV,SAAS,CAAEK,6CAcX,IAAAO,EAC0BpB,KAAKY,MAA9BH,EADDW,EACCX,QAASQ,EADVG,EACUH,YAEjB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,oBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,QACOH,EAAAC,EAAAC,cAAA,gCADP,OACyC,IACvCF,EAAAC,EAAAC,cAAA,8CAGJF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,iBACVE,OAAO,2CACPC,OAAQ3B,KAAKI,WAEbiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZf,EACCY,EAAAC,EAAAC,cAAA,OAAKK,IAAKnB,EAASoB,OAAQ7B,KAAKU,UAAWoB,IAAI,YAE/CT,EAAAC,EAAAC,cAAA,mCAINF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZP,GACCA,EAAYc,IAAI,SAACC,EAAYC,GAC3B,IAAMC,EACJC,KAAKC,MAA+B,IAAzBJ,EAAWK,YAAoB,KAAO,IAEnD,OACEhB,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVc,IAAG,GAAAC,OAAKN,EAAL,KAAAM,OAAcP,EAAWK,cAE5BhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBQ,EAAWR,WAC1CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACVgB,MAAO,CACLC,MAAK,GAAAF,OAAKL,EAAL,KACLQ,mBAAoB,SAI1BrB,EAAAC,EAAAC,cAAA,YAAOW,EAAP,kBAzEFS,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.d6ee871b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport MagicDropZone from \"react-magic-dropzone\";\n\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"@tensorflow/tfjs\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      model: null,\n      preview: \"\",\n      predictions: []\n    };\n  }\n\n  componentDidMount() {\n    mobilenet.load().then(model => {\n      this.setState({ model });\n    });\n  }\n\n  onImgDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview });\n  };\n\n  onImgLoad = e => {\n    this.state.model.classify(e.target).then(predictions => {\n      this.setState({ predictions });\n    });\n  };\n\n  render() {\n    const { preview, predictions } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"desc\">\n          <p className=\"title\">Image Prediction</p>\n          <p className=\"body\">\n            with <span>@tensorflow/tfjs</span> and{\" \"}\n            <span>@tensorflow-models/mobilenet</span>\n          </p>\n        </div>\n        <MagicDropZone\n          className=\"magic-dropzone\"\n          accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n          onDrop={this.onImgDrop}\n        >\n          <div className=\"dropzone-content\">\n            {preview ? (\n              <img src={preview} onLoad={this.onImgLoad} alt=\"dropped\" />\n            ) : (\n              <p>Drop your image here</p>\n            )}\n          </div>\n        </MagicDropZone>\n        <div className=\"prediction-content\">\n          {predictions &&\n            predictions.map((prediction, index) => {\n              const percentProb =\n                Math.round(prediction.probability * 100 * 100) / 100;\n\n              return (\n                <div\n                  className=\"box-content\"\n                  key={`${index}-${prediction.probability}`}\n                >\n                  <div className=\"name-content\">{prediction.className}</div>\n                  <div className=\"prob-content\">\n                    <div className=\"bar-bg\">\n                      <div\n                        className=\"bar-main\"\n                        style={{\n                          width: `${percentProb}%`,\n                          transitionDuration: \"5s\"\n                        }}\n                      />\n                    </div>\n                    <span>{percentProb}%</span>\n                  </div>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}